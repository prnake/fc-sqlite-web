edition: 1.0.0          #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范
name: fc-sqlite-web       #  项目名称
access: "{{ access }}"

vars: # 全局变量
  region: "{{ region }}" 
  service:
    name: "{{ serviceName }}"
    description: 'Serverless Sqlite Web'
  sqliteWeb:
    prefix: "{{ sqliteWebPrefix }}"
    password: "{{ sqliteWebPassword }}"

services:
  framework: # 业务名称/模块名称
    # 如果只想针对 framework 下面的业务进行相关操作，可以在命令行中加上 framework，例如：
    # 只对framework进行构建：s framework build
    # 如果不带有 framework ，而是直接执行 s build，工具则会对当前Yaml下，所有和 framework 平级的业务模块（如有其他平级的模块，例如下面注释的next-function），按照一定顺序进行 build 操作
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy: # 在deploy之前运行
        - run: pip3 install -r requirements.txt -t . # 要执行的系统命令，类似于一种钩子的形式
          path: ./code # 执行系统命令/钩子的路径
    props: # 组件的属性值
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "sqlite-web"
        description: 'Serverless Sqlite Web'
        codeUri: './code'
        runtime: python3.9
        handler: index.handler
        memorySize: 128
        timeout: 60
        environmentVariables:
          sqliteWebPrefix: ${vars.sqliteWeb.prefix}
          sqliteWebPassword: ${vars.sqliteWeb.password}
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: '/*'
